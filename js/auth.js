function generateOTP() {
  return Math.floor(1000 + Math.random() * 9000).toString();
}

function createAuthPage(mode = 'login') {
  document.body.innerHTML = `
    <div class="auth-wrapper">
      <div class="auth-container">
        <h2>${mode === 'login' ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
        <form id="authForm">
          ${mode === 'register' ? '<input type="text" placeholder="–õ–æ–≥–∏–Ω" name="login" required />' : ''}
          <input type="tel" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" name="phone" required />
          <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" name="password" required />
          ${mode === 'login' ? `
            <label class="remember"><input type="checkbox" name="remember" /> –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</label>
            <div class="otp-container" id="otpContainer">
              <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:</p>
              <input type="text" class="otp-input" maxlength="1" id="otp1">
              <input type="text" class="otp-input" maxlength="1" id="otp2">
              <input type="text" class="otp-input" maxlength="1" id="otp3">
              <input type="text" class="otp-input" maxlength="1" id="otp4">
              <button type="button" id="resendOTP">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
          ` : ''}
          <button type="submit" id="submitBtn">${mode === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}</button>
          ${mode === 'login' ? '<p><a href="#" id="forgotPassword">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a></p>' : ''}
          <p>${mode === 'login' ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'} <a href="#" id="switchMode">${mode === 'login' ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : '–í—Ö–æ–¥'}</a></p>
        </form>
      </div>
    </div>
  `;

  document.getElementById("switchMode").addEventListener("click", function (e) {
    e.preventDefault();
    createAuthPage(mode === 'login' ? 'register' : 'login');
  });

  if (mode === 'login') {
    document.getElementById("forgotPassword").addEventListener("click", function (e) {
      e.preventDefault();
      alert("–§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
    });

    const otpInputs = document.querySelectorAll('.otp-input');
    otpInputs.forEach((input, index) => {
      input.addEventListener('input', () => {
        if (input.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
      });
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && input.value.length === 0 && index > 0) {
          otpInputs[index - 1].focus();
        }
      });
    });
  }

  document.getElementById("authForm").addEventListener("submit", function (e) {
    e.preventDefault();
    const form = e.target;
    const phone = form.phone.value.trim();
    const password = form.password.value;
    const users = JSON.parse(localStorage.getItem("users")) || [];

    if (mode === 'register') {
      const login = form.login.value.trim();
      const userExists = users.find(u => u.login === login || u.phone === phone);

      if (userExists) {
        alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        return;
      }

      users.push({ login, phone, password });
      localStorage.setItem("users", JSON.stringify(users));
      localStorage.setItem("currentUser", JSON.stringify({ login, phone }));
      renderLoggedInHeader(login);
    } else {
      const user = users.find(u => u.phone === phone && u.password === password);
      if (!user) {
        alert("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
        return;
      }

      const otpContainer = document.getElementById("otpContainer");
      if (otpContainer.style.display === 'none' || !otpContainer.style.display) {
        const otp = generateOTP();
        localStorage.setItem("tempOTP", otp);
        alert(`–î–µ–º–æ: –ö–æ–¥ OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${phone}. –ö–æ–¥: ${otp}`);
        
        otpContainer.style.display = 'block';
        document.getElementById("submitBtn").textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
        document.getElementById("otp1").focus();
        
        document.getElementById("resendOTP").addEventListener("click", function() {
          const newOTP = generateOTP();
          localStorage.setItem("tempOTP", newOTP);
          alert(`–î–µ–º–æ: –ù–æ–≤—ã–π –∫–æ–¥ OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–¥: ${newOTP}`);
        });
        
        return;
      } else {
        const enteredOTP = Array.from(document.querySelectorAll('.otp-input'))
          .map(input => input.value)
          .join('');
          
        const savedOTP = localStorage.getItem("tempOTP");
        
        if (enteredOTP !== savedOTP) {
          alert("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
          return;
        }
        
        localStorage.removeItem("tempOTP");
      }

      if (form.remember && form.remember.checked) {
        localStorage.setItem("rememberedUser", JSON.stringify({ phone, password }));
      } else {
        localStorage.removeItem("rememberedUser");
      }

      localStorage.setItem("currentUser", JSON.stringify({ login: user.login, phone: user.phone }));
      renderLoggedInHeader(user.login);
    }
  });
}

function renderLoggedInHeader(username) {
  document.body.innerHTML = `
    <header>
      <div class="logo">JoinUs</div>
      <nav>
        <button onclick="alert('–õ–µ–Ω—Ç–∞ –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')">–õ–µ–Ω—Ç–∞</button>
        <button onclick="alert('–ß–∞—Ç –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')">–ß–∞—Ç</button>
        <button onclick="alert('–ü—Ä–æ—Ñ–∏–ª—å –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')">–ü—Ä–æ—Ñ–∏–ª—å</button>
        <div class="dropdown">
          <button class="dropdown-toggle">${username}</button>
          <div class="dropdown-menu">
            <button id="logoutButton">–í—ã–π—Ç–∏</button>
          </div>
        </div>
      </nav>
    </header>
    <main>
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <span class="logo-blue">JoinUs!</span></h1>
      <p>–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è ‚Äî –æ–±—â–∞–π—Ç–µ—Å—å, –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π, –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!</p>
      <p class="subtitle">–¢–≤–æ—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è!</p>
      <div class="features">
        <div class="feature-card">
          <div class="feature-icon-wrapper">
            <div class="feature-icon">üë•</div>
          </div>
          <h3 class="feature-title">–ù–∞—Ö–æ–¥–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤</h3>
          <p class="feature-desc">–°–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—Ö–æ–¥–∏ –ª—é–¥–µ–π —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, —á—Ç–æ –∏ —É —Ç–µ–±—è!</p>
          <div class="feature-wave"></div>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon-wrapper">
            <div class="feature-icon">üé®</div>
          </div>
          <h3 class="feature-title">–í—ã—Ä–∞–∂–∞–π —Å–µ–±—è</h3>
          <p class="feature-desc">–ü–æ—Å—Ç—ã –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!</p>
          <div class="feature-wave"></div>
        </div>
        
        <div class="feature-card">
          <div class="feature-icon-wrapper">
            <div class="feature-icon">üîí</div>
          </div>
          <h3 class="feature-title">–ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</h3>
          <p class="feature-desc">–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</p>
          <div class="feature-wave"></div>
        </div>
      </div>
      
      <div class="hero-image">
        <img src="https://static.tildacdn.com/tild3939-3761-4033-b336-373461383139/fcd845f3188a7428e060.jpg" alt="–õ—é–¥–∏ –æ–±—â–∞—é—Ç—Å—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏">
      </div>
    </main>
  `;
  
  document.getElementById("logoutButton").addEventListener("click", () => {
    localStorage.removeItem("currentUser");
    location.reload();
  });
}

window.addEventListener("DOMContentLoaded", function () {
  const currentUser = JSON.parse(localStorage.getItem("currentUser"));
  if (currentUser) {
    renderLoggedInHeader(currentUser.login);
  } else {
    const rememberedUser = JSON.parse(localStorage.getItem("rememberedUser"));
    if (rememberedUser) {
      createAuthPage('login');
      document.querySelector('input[name="phone"]').value = rememberedUser.phone;
      document.querySelector('input[name="password"]').value = rememberedUser.password;
      document.querySelector('input[name="remember"]').checked = true;
    } else {
      const authButton = document.getElementById("authButton");
      if (authButton) {
        authButton.addEventListener("click", function () {
          createAuthPage('login');
        });
      }
    }
  }
});
